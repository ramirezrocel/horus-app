{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.joiPasswordExtendCore = void 0;\n\nfunction joiPasswordExtendCore(joi) {\n  return {\n    type: 'string',\n    base: joi.string(),\n    messages: {\n      'password.minOfUppercase': '{#label} should contain at least {#min} uppercase character',\n      'password.minOfSpecialCharacters': '{#label} should contain at least {#min} special character',\n      'password.minOfLowercase': '{#label} should contain at least {#min} lowercase character',\n      'password.minOfNumeric': '{#label} should contain at least {#min} numeric character',\n      'password.noWhiteSpaces': '{#label} should not contain white spaces' // 'password.notIncludeWith': '{#label} should not include {#field}',\n\n    },\n    rules: {\n      minOfUppercase: {\n        method(min) {\n          return this.$_addRule({\n            name: 'minOfUppercase',\n            args: {\n              min\n            }\n          });\n        },\n\n        args: [{\n          name: 'min',\n          assert: value => typeof value === 'number' && !isNaN(value),\n          message: 'must be a number'\n        }],\n        validate: (value, helpers, _ref) => {\n          let {\n            min = 0\n          } = _ref;\n          if (!new RegExp(`(?=(.*[A-Z]){${min}})`).test(value)) return helpers.error('password.minOfUppercase', {\n            min\n          });\n          return value;\n        }\n      },\n      minOfLowercase: {\n        method(min) {\n          return this.$_addRule({\n            name: 'minOfLowercase',\n            args: {\n              min\n            }\n          });\n        },\n\n        args: [{\n          name: 'min',\n          assert: value => typeof value === 'number' && !isNaN(value),\n          message: 'must be a number'\n        }],\n        validate: (value, helpers, _ref2) => {\n          let {\n            min = 0\n          } = _ref2;\n          if (!new RegExp(`(?=(.*[a-z]){${min}})`).test(value)) return helpers.error('password.minOfLowercase', {\n            min\n          });\n          return value;\n        }\n      },\n      minOfSpecialCharacters: {\n        method(min) {\n          return this.$_addRule({\n            name: 'minOfSpecialCharacters',\n            args: {\n              min\n            }\n          });\n        },\n\n        args: [{\n          name: 'min',\n          assert: value => typeof value === 'number' && !isNaN(value),\n          message: 'must be a number'\n        }],\n        validate: (value, helpers, _ref3) => {\n          let {\n            min = 0\n          } = _ref3;\n          const numSpecial = value.length - (value.match(/[a-zA-Z0-9]/g) || []).length;\n          if (numSpecial < min) return helpers.error('password.minOfSpecialCharacters', {\n            min\n          });\n          return value;\n        }\n      },\n      minOfNumeric: {\n        method(min) {\n          return this.$_addRule({\n            name: 'minOfNumeric',\n            args: {\n              min\n            }\n          });\n        },\n\n        args: [{\n          name: 'min',\n          assert: value => typeof value === 'number' && !isNaN(value),\n          message: 'must be a number'\n        }],\n        validate: (value, helpers, _ref4) => {\n          let {\n            min = 0\n          } = _ref4;\n          if (!new RegExp(`(?=(.*[0-9]){${min}})`, 'g').test(value)) return helpers.error('password.minOfNumeric', {\n            min\n          });\n          return value;\n        }\n      },\n      noWhiteSpaces: {\n        validate: (value, helpers) => {\n          if (new RegExp(` `, 'g').test(value)) return helpers.error('password.noWhiteSpaces');\n          return value;\n        }\n      }\n    }\n  };\n}\n\nexports.joiPasswordExtendCore = joiPasswordExtendCore;","map":{"version":3,"sources":["C:/Users/RRAMIREZ/Documents/REACT/master-1/socialMedia-main/socialMedia-app/node_modules/joi-password/lib/index.js"],"names":["Object","defineProperty","exports","value","joiPasswordExtendCore","joi","type","base","string","messages","rules","minOfUppercase","method","min","$_addRule","name","args","assert","isNaN","message","validate","helpers","RegExp","test","error","minOfLowercase","minOfSpecialCharacters","numSpecial","length","match","minOfNumeric","noWhiteSpaces"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.joiPasswordExtendCore = void 0;\r\nfunction joiPasswordExtendCore(joi) {\r\n    return {\r\n        type: 'string',\r\n        base: joi.string(),\r\n        messages: {\r\n            'password.minOfUppercase': '{#label} should contain at least {#min} uppercase character',\r\n            'password.minOfSpecialCharacters': '{#label} should contain at least {#min} special character',\r\n            'password.minOfLowercase': '{#label} should contain at least {#min} lowercase character',\r\n            'password.minOfNumeric': '{#label} should contain at least {#min} numeric character',\r\n            'password.noWhiteSpaces': '{#label} should not contain white spaces',\r\n            // 'password.notIncludeWith': '{#label} should not include {#field}',\r\n        },\r\n        rules: {\r\n            minOfUppercase: {\r\n                method(min) {\r\n                    return this.$_addRule({\r\n                        name: 'minOfUppercase',\r\n                        args: { min },\r\n                    });\r\n                },\r\n                args: [\r\n                    {\r\n                        name: 'min',\r\n                        assert: (value) => typeof value === 'number' && !isNaN(value),\r\n                        message: 'must be a number',\r\n                    },\r\n                ],\r\n                validate: (value, helpers, { min = 0 }) => {\r\n                    if (!new RegExp(`(?=(.*[A-Z]){${min}})`).test(value))\r\n                        return helpers.error('password.minOfUppercase', { min });\r\n                    return value;\r\n                },\r\n            },\r\n            minOfLowercase: {\r\n                method(min) {\r\n                    return this.$_addRule({\r\n                        name: 'minOfLowercase',\r\n                        args: { min },\r\n                    });\r\n                },\r\n                args: [\r\n                    {\r\n                        name: 'min',\r\n                        assert: (value) => typeof value === 'number' && !isNaN(value),\r\n                        message: 'must be a number',\r\n                    },\r\n                ],\r\n                validate: (value, helpers, { min = 0 }) => {\r\n                    if (!new RegExp(`(?=(.*[a-z]){${min}})`).test(value))\r\n                        return helpers.error('password.minOfLowercase', { min });\r\n                    return value;\r\n                },\r\n            },\r\n            minOfSpecialCharacters: {\r\n                method(min) {\r\n                    return this.$_addRule({\r\n                        name: 'minOfSpecialCharacters',\r\n                        args: { min },\r\n                    });\r\n                },\r\n                args: [\r\n                    {\r\n                        name: 'min',\r\n                        assert: (value) => typeof value === 'number' && !isNaN(value),\r\n                        message: 'must be a number',\r\n                    },\r\n                ],\r\n                validate: (value, helpers, { min = 0 }) => {\r\n                    const numSpecial = value.length - (value.match(/[a-zA-Z0-9]/g) || []).length;\r\n                    if (numSpecial < min)\r\n                        return helpers.error('password.minOfSpecialCharacters', {\r\n                            min,\r\n                        });\r\n                    return value;\r\n                },\r\n            },\r\n            minOfNumeric: {\r\n                method(min) {\r\n                    return this.$_addRule({\r\n                        name: 'minOfNumeric',\r\n                        args: { min },\r\n                    });\r\n                },\r\n                args: [\r\n                    {\r\n                        name: 'min',\r\n                        assert: (value) => typeof value === 'number' && !isNaN(value),\r\n                        message: 'must be a number',\r\n                    },\r\n                ],\r\n                validate: (value, helpers, { min = 0 }) => {\r\n                    if (!new RegExp(`(?=(.*[0-9]){${min}})`, 'g').test(value))\r\n                        return helpers.error('password.minOfNumeric', { min });\r\n                    return value;\r\n                },\r\n            },\r\n            noWhiteSpaces: {\r\n                validate: (value, helpers) => {\r\n                    if (new RegExp(` `, 'g').test(value))\r\n                        return helpers.error('password.noWhiteSpaces');\r\n                    return value;\r\n                },\r\n            },\r\n        },\r\n    };\r\n}\r\nexports.joiPasswordExtendCore = joiPasswordExtendCore;\r\n"]},"metadata":{},"sourceType":"script"}