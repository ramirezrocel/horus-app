{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"defaultValue\", \"children\", \"component\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport FormControlUnstyledContext from './FormControlUnstyledContext';\nimport { getFormControlUnstyledUtilityClass } from './formControlUnstyledClasses';\nimport { useSlotProps } from '../utils';\nimport composeClasses from '../composeClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']\n  };\n  return composeClasses(slots, getFormControlUnstyledUtilityClass, {});\n}\n/**\r\n * Provides context such as filled/focused/error/required for form inputs.\r\n * Relying on the context provides high flexibility and ensures that the state always stays\r\n * consistent across the children of the `FormControl`.\r\n * This context is used by the following components:\r\n *\r\n * *   FormLabel\r\n * *   FormHelperText\r\n * *   Input\r\n * *   InputLabel\r\n *\r\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\r\n *\r\n * ```jsx\r\n * <FormControl>\r\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n * </FormControl>\r\n * ```\r\n *\r\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\r\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\r\n *\r\n * Demos:\r\n *\r\n * - [Unstyled Form Control](https://mui.com/base/react-form-control/)\r\n *\r\n * API:\r\n *\r\n * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)\r\n */\n\n\nconst FormControlUnstyled = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {\n  var _ref;\n\n  const {\n    defaultValue,\n    children,\n    component,\n    disabled = false,\n    error = false,\n    onChange,\n    required = false,\n    slotProps = {},\n    slots = {},\n    value: incomingValue\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [value, setValue] = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  });\n  const filled = hasValue(value);\n  const [focusedState, setFocused] = React.useState(false);\n  const focused = focusedState && !disabled;\n  React.useEffect(() => setFocused(isFocused => disabled ? false : isFocused), [disabled]);\n\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n\n  const childContext = React.useMemo(() => {\n    return {\n      disabled,\n      error,\n      filled,\n      focused,\n      onBlur: () => {\n        setFocused(false);\n      },\n      onChange: event => {\n        setValue(event.target.value);\n        onChange == null ? void 0 : onChange(event);\n      },\n      onFocus: () => {\n        setFocused(true);\n      },\n      required,\n      value: value != null ? value : ''\n    };\n  }, [disabled, error, filled, focused, onChange, required, setValue, value]);\n  const classes = useUtilityClasses(ownerState);\n\n  const renderChildren = () => {\n    if (typeof children === 'function') {\n      return children(childContext);\n    }\n\n    return children;\n  };\n\n  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref,\n      children: renderChildren()\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(FormControlUnstyledContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n\n  /**\r\n   * @ignore\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true`, the label is displayed in an error state.\r\n   * @default false\r\n   */\n  error: PropTypes.bool,\n\n  /**\r\n   * @ignore\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * If `true`, the label will indicate that the `input` is required.\r\n   * @default false\r\n   */\n  required: PropTypes.bool,\n\n  /**\r\n   * The props used for each slot inside the FormControl.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\r\n   * The components used for each slot inside the FormControl.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\r\n   * @ignore\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlUnstyled;","map":{"version":3,"sources":["C:/Users/RRAMIREZ/Documents/REACT/master-1/socialMedia-main/socialMedia-app/node_modules/@mui/base/FormControlUnstyled/FormControlUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useControlled","useControlled","FormControlUnstyledContext","getFormControlUnstyledUtilityClass","useSlotProps","composeClasses","jsx","_jsx","hasValue","value","Array","isArray","length","useUtilityClasses","ownerState","disabled","error","filled","focused","required","slots","root","FormControlUnstyled","forwardRef","props","ref","_ref","defaultValue","children","component","onChange","slotProps","incomingValue","other","setValue","controlled","default","name","state","focusedState","setFocused","useState","useEffect","isFocused","childContext","useMemo","onBlur","event","target","onFocus","classes","renderChildren","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","className","Provider","process","env","NODE_ENV","propTypes","oneOfType","node","func","any","bool","shape","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"defaultValue\", \"children\", \"component\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { unstable_useControlled as useControlled } from '@mui/utils';\r\nimport FormControlUnstyledContext from './FormControlUnstyledContext';\r\nimport { getFormControlUnstyledUtilityClass } from './formControlUnstyledClasses';\r\nimport { useSlotProps } from '../utils';\r\nimport composeClasses from '../composeClasses';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction hasValue(value) {\r\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\r\n}\r\nfunction useUtilityClasses(ownerState) {\r\n  const {\r\n    disabled,\r\n    error,\r\n    filled,\r\n    focused,\r\n    required\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']\r\n  };\r\n  return composeClasses(slots, getFormControlUnstyledUtilityClass, {});\r\n}\r\n\r\n/**\r\n * Provides context such as filled/focused/error/required for form inputs.\r\n * Relying on the context provides high flexibility and ensures that the state always stays\r\n * consistent across the children of the `FormControl`.\r\n * This context is used by the following components:\r\n *\r\n * *   FormLabel\r\n * *   FormHelperText\r\n * *   Input\r\n * *   InputLabel\r\n *\r\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\r\n *\r\n * ```jsx\r\n * <FormControl>\r\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n * </FormControl>\r\n * ```\r\n *\r\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\r\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\r\n *\r\n * Demos:\r\n *\r\n * - [Unstyled Form Control](https://mui.com/base/react-form-control/)\r\n *\r\n * API:\r\n *\r\n * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)\r\n */\r\nconst FormControlUnstyled = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {\r\n  var _ref;\r\n  const {\r\n      defaultValue,\r\n      children,\r\n      component,\r\n      disabled = false,\r\n      error = false,\r\n      onChange,\r\n      required = false,\r\n      slotProps = {},\r\n      slots = {},\r\n      value: incomingValue\r\n    } = props,\r\n    other = _objectWithoutPropertiesLoose(props, _excluded);\r\n  const [value, setValue] = useControlled({\r\n    controlled: incomingValue,\r\n    default: defaultValue,\r\n    name: 'FormControl',\r\n    state: 'value'\r\n  });\r\n  const filled = hasValue(value);\r\n  const [focusedState, setFocused] = React.useState(false);\r\n  const focused = focusedState && !disabled;\r\n  React.useEffect(() => setFocused(isFocused => disabled ? false : isFocused), [disabled]);\r\n  const ownerState = _extends({}, props, {\r\n    disabled,\r\n    error,\r\n    filled,\r\n    focused,\r\n    required\r\n  });\r\n  const childContext = React.useMemo(() => {\r\n    return {\r\n      disabled,\r\n      error,\r\n      filled,\r\n      focused,\r\n      onBlur: () => {\r\n        setFocused(false);\r\n      },\r\n      onChange: event => {\r\n        setValue(event.target.value);\r\n        onChange == null ? void 0 : onChange(event);\r\n      },\r\n      onFocus: () => {\r\n        setFocused(true);\r\n      },\r\n      required,\r\n      value: value != null ? value : ''\r\n    };\r\n  }, [disabled, error, filled, focused, onChange, required, setValue, value]);\r\n  const classes = useUtilityClasses(ownerState);\r\n  const renderChildren = () => {\r\n    if (typeof children === 'function') {\r\n      return children(childContext);\r\n    }\r\n    return children;\r\n  };\r\n  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';\r\n  const rootProps = useSlotProps({\r\n    elementType: Root,\r\n    externalSlotProps: slotProps.root,\r\n    externalForwardedProps: other,\r\n    additionalProps: {\r\n      ref,\r\n      children: renderChildren()\r\n    },\r\n    ownerState,\r\n    className: classes.root\r\n  });\r\n  return /*#__PURE__*/_jsx(FormControlUnstyledContext.Provider, {\r\n    value: childContext,\r\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps))\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? FormControlUnstyled.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.node, PropTypes.func]),\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\r\n  component: PropTypes.elementType,\r\n  /**\r\n   * @ignore\r\n   */\r\n  defaultValue: PropTypes.any,\r\n  /**\r\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * If `true`, the label is displayed in an error state.\r\n   * @default false\r\n   */\r\n  error: PropTypes.bool,\r\n  /**\r\n   * @ignore\r\n   */\r\n  onChange: PropTypes.func,\r\n  /**\r\n   * If `true`, the label will indicate that the `input` is required.\r\n   * @default false\r\n   */\r\n  required: PropTypes.bool,\r\n  /**\r\n   * The props used for each slot inside the FormControl.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.shape({\r\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n  }),\r\n  /**\r\n   * The components used for each slot inside the FormControl.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.shape({\r\n    root: PropTypes.elementType\r\n  }),\r\n  /**\r\n   * @ignore\r\n   */\r\n  value: PropTypes.any\r\n} : void 0;\r\nexport default FormControlUnstyled;"]},"metadata":{},"sourceType":"module"}